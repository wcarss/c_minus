==20650== Memcheck, a memory error detector
==20650== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==20650== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info
==20650== Command: ./main
==20650== 
Test 1, 'remove on empty list':
test 1:	success
Test 2, 'remove on lone node':
1.
test 2:	success
Test 3, 'remove root with 2 nodes':
2, 1.
1.
test 3:	success
Test 4, 'remove tail with 2 nodes':
2, 1.
l, l->current: 0x41987d8, (nil)
==20650== Invalid read of size 4
==20650==    at 0x804917C: list_remove (list.c:254)
==20650==    by 0x8048885: main (main.c:60)
==20650==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==20650== 
==20650== 
==20650== Process terminating with default action of signal 11 (SIGSEGV)
==20650==  Access not within mapped region at address 0x4
==20650==    at 0x804917C: list_remove (list.c:254)
==20650==    by 0x8048885: main (main.c:60)
==20650==  If you believe this happened as a result of a stack
==20650==  overflow in your program's main thread (unlikely but
==20650==  possible), you can try to increase the size of the
==20650==  main thread stack using the --main-stacksize= flag.
==20650==  The main thread stack size used in this run was 8388608.
==20650== 
==20650== HEAP SUMMARY:
==20650==     in use at exit: 840 bytes in 3 blocks
==20650==   total heap usage: 9 allocs, 6 frees, 2,508 bytes allocated
==20650== 
==20650== LEAK SUMMARY:
==20650==    definitely lost: 0 bytes in 0 blocks
==20650==    indirectly lost: 0 bytes in 0 blocks
==20650==      possibly lost: 0 bytes in 0 blocks
==20650==    still reachable: 840 bytes in 3 blocks
==20650==         suppressed: 0 bytes in 0 blocks
==20650== Rerun with --leak-check=full to see details of leaked memory
==20650== 
==20650== For counts of detected and suppressed errors, rerun with: -v
==20650== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 13 from 8)
